name: "🚀 Publish Ops Controller Docker"

# Publishes ops-controller Docker image for automated Trigger.dev supervisor deployment
# Triggers on main branch and pull requests for testing, PR trigger will be removed later

permissions:
  contents: read
  packages: write
  id-token: write

on:
  push:
    branches:
      - main
    paths:
      - ".github/workflows/publish-ops-controller.yml"
      - ".railway/ops-controller/**"
  pull_request:
    branches:
      - main
    types: [opened, synchronize]
    paths:
      - ".github/workflows/publish-ops-controller.yml"
      - ".railway/ops-controller/**"
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'latest'

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_tag.outputs.tag }}
      image_url: ${{ steps.set_tags.outputs.image_url }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: "#️⃣ Get the image tag"
        id: get_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.version_tag }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            # For pull requests or other branches
            TAG="pr-${{ github.event.number || github.ref_name }}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "🏷️ Using tag: ${TAG}"

      - name: 🔢 Get the commit hash
        id: get_commit
        run: |
          echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: 📛 Set the tags
        id: set_tags
        run: |
          # Use your fork's registry for ops-controller
          ref_without_tag=ghcr.io/nick0lay/trigger-ops-controller
          image_tags=$ref_without_tag:${{ steps.get_tag.outputs.tag }}

          # Add commit SHA for traceability
          image_tags=$image_tags,$ref_without_tag:sha-${{ steps.get_commit.outputs.sha_short }}

          # Add latest tag for main branch builds (not PRs)
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ steps.get_tag.outputs.tag }}" != "latest" ]]; then
            image_tags=$image_tags,$ref_without_tag:latest
          fi

          echo "image_tags=${image_tags}" >> "$GITHUB_OUTPUT"
          echo "image_url=${ref_without_tag}:${{ steps.get_tag.outputs.tag }}" >> "$GITHUB_OUTPUT"
          echo "📦 Image tags: ${image_tags}"

      - name: 📝 Set the build info
        id: set_build_info
        run: |
          echo "BUILD_VERSION=${{ steps.get_tag.outputs.tag }}" >> "$GITHUB_OUTPUT"
          echo "BUILD_GIT_SHA=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          echo "BUILD_GIT_REF_NAME=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "BUILD_TIMESTAMP_SECONDS=$(date +%s)" >> "$GITHUB_OUTPUT"

      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐙 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build image and push to GitHub Container Registry
        uses: docker/build-push-action@v5
        with:
          context: .railway/ops-controller
          file: .railway/ops-controller/Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.set_tags.outputs.image_tags }}
          push: true
          # Use registry cache for faster builds
          cache-from: type=registry,ref=ghcr.io/nick0lay/trigger-ops-controller:cache
          cache-to: type=registry,ref=ghcr.io/nick0lay/trigger-ops-controller:cache,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.set_build_info.outputs.BUILD_VERSION }}
            BUILD_GIT_SHA=${{ steps.set_build_info.outputs.BUILD_GIT_SHA }}
            BUILD_GIT_REF_NAME=${{ steps.set_build_info.outputs.BUILD_GIT_REF_NAME }}
            BUILD_TIMESTAMP_SECONDS=${{ steps.set_build_info.outputs.BUILD_TIMESTAMP_SECONDS }}
          labels: |
            org.opencontainers.image.title=Trigger.dev Ops Controller
            org.opencontainers.image.description=Automated supervisor deployment controller for Trigger.dev
            org.opencontainers.image.url=https://github.com/nick0lay/trigger.dev
            org.opencontainers.image.source=https://github.com/nick0lay/trigger.dev
            org.opencontainers.image.version=${{ steps.get_tag.outputs.tag }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0
            ops-controller.deployment=true

      - name: 📢 Output summary
        run: |
          echo "## 🚀 Ops Controller Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image URL:** \`${{ steps.set_tags.outputs.image_url }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.get_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ steps.get_commit.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Automated supervisor deployment to DigitalOcean" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smart token management with Railway API integration" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ PostgreSQL logical replication configuration" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Self-healing monitoring with auto-disable" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --env-file .env ${{ steps.set_tags.outputs.image_url }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Compose" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
          echo "services:" >> $GITHUB_STEP_SUMMARY
          echo "  ops-controller:" >> $GITHUB_STEP_SUMMARY
          echo "    image: ${{ steps.set_tags.outputs.image_url }}" >> $GITHUB_STEP_SUMMARY
          echo "    env_file: .env" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY